
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import pruebas.TrayIconDemo;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import utiles.ArrayAdapter;

/**
 *
 * @author jmmurcia
 */
public class PanelCliente extends javax.swing.JFrame {

    /**
     * Creates new form PanelCliente
     */
    Socket cliente = null;
    //puerto para la conexion
    static final int port = 1800;
    //nombre del servidor
    static final String server = "localhost";
    //hilo de ejecucion que estará a modo de oyente
    //cuando se reciban datos del servidor.
    static RecepcionDatos recibimos;
    //flujos de datos
    static DataOutputStream dos = null;

    static int contador = 1;
    static volatile boolean pausar = false;
    //flag que para el hilo de ejecucion en espera.
    DefaultTableModel modelo;
    DefaultListModel<TrayIconDemo> lista;

    ArrayAdapter adaptador;

    public PanelCliente() {
        initComponents();
        iniciar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jFrame1 = new javax.swing.JFrame();
        label1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        label2 = new javax.swing.JLabel();
        btn_Conectar = new javax.swing.JButton();
        jtf_comandos = new javax.swing.JTextField();
        jtf_Enviar = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jComboUsers = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jbLista = new javax.swing.JButton();
        jbtn_clear = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        lbl_users = new javax.swing.JLabel();
        marco = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_Area = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList = new javax.swing.JList();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu_salir = new javax.swing.JMenu();
        menu_login = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        menu_comandos = new javax.swing.JMenuItem();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jFrame1.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        label1.setText("Cliente:");

        label2.setText("Puerto");

        btn_Conectar.setText("Conectar");
        btn_Conectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ConectarActionPerformed(evt);
            }
        });

        jtf_Enviar.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jtf_Enviar.setText("Enviar");
        jtf_Enviar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jtf_Enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_EnviarActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mensajes"
            }
        ));
        jScrollPane4.setViewportView(jTable2);

        jComboUsers.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "lista vacia" }));
        jComboUsers.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboUsersFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jComboUsersFocusLost(evt);
            }
        });
        jComboUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboUsersActionPerformed(evt);
            }
        });

        jLabel1.setText("Seleccione usuario:");

        jbLista.setText("Listar");
        jbLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbListaActionPerformed(evt);
            }
        });

        jbtn_clear.setText("Borrar");
        jbtn_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_clearActionPerformed(evt);
            }
        });

        jLabel2.setText("Clientes conectados:");

        lbl_users.setBackground(new java.awt.Color(153, 153, 153));
        lbl_users.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbl_users.setForeground(new java.awt.Color(51, 51, 51));
        lbl_users.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_users.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lbl_users.setEnabled(false);

        marco.setBackground(new java.awt.Color(255, 255, 204));
        marco.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        marco.setLayout(null);

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setAlignmentY(0.0F);
        jLabel3.setAutoscrolls(true);
        jLabel3.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        marco.add(jLabel3);
        jLabel3.setBounds(13, 120, 350, 80);

        txt_Area.setColumns(20);
        txt_Area.setRows(5);
        jScrollPane1.setViewportView(txt_Area);

        marco.add(jScrollPane1);
        jScrollPane1.setBounds(10, 10, 360, 110);

        jButton1.setText("añadir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", " " };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(jList);

        menu_salir.setText("Acciones");

        menu_login.setText("Login");
        menu_login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_loginActionPerformed(evt);
            }
        });
        menu_salir.add(menu_login);

        jMenuItem3.setText("Salir");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        menu_salir.add(jMenuItem3);

        jMenuBar1.add(menu_salir);

        jMenu1.setText("Ayuda");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        menu_comandos.setText("Comandos");
        menu_comandos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_comandosActionPerformed(evt);
            }
        });
        jMenu1.add(menu_comandos);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbLista)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addComponent(jbtn_clear)
                        .addGap(112, 112, 112))
                    .addComponent(jScrollPane4)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(label1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(label2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_Conectar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbl_users, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jtf_comandos, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jtf_Enviar, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(marco, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane3)))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btn_Conectar, jtf_Enviar});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(label2)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboUsers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbLista)
                    .addComponent(jbtn_clear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(marco, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_comandos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtf_Enviar)
                    .addComponent(jButton1))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_Conectar)
                        .addComponent(jLabel2))
                    .addComponent(lbl_users, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btn_Conectar, jtf_Enviar, jtf_comandos});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_ConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ConectarActionPerformed
        if (evt.getActionCommand().equalsIgnoreCase("conectar")
                | evt.getActionCommand().equalsIgnoreCase("login")) {//login porque es el comando del item de menu LOGIN
            try {
                realizarConexion();
            } catch (IOException ex) {
                Logger.getLogger(PanelCliente.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(PanelCliente.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (evt.getActionCommand().equalsIgnoreCase("desconectar")) {
            System.out.println("Saliendo del chat...");

            if (cliente.isConnected()) {
                try {
                    //intentamos cerrar la conexion  

                } catch (Exception ex) {
                    Logger.getLogger(PanelCliente.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
    }//GEN-LAST:event_btn_ConectarActionPerformed

    private void jtf_EnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtf_EnviarActionPerformed

        try {
            dos = new DataOutputStream(cliente.getOutputStream());
            dos.writeUTF(jtf_comandos.getText());
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_jtf_EnviarActionPerformed

    private void jComboUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboUsersActionPerformed
        //System.out.println("Buscamos los nombres de usuarios");

    }//GEN-LAST:event_jComboUsersActionPerformed

    private void jComboUsersFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboUsersFocusGained
        // System.out.println("Buscamos los usuarios conectados.");


    }//GEN-LAST:event_jComboUsersFocusGained

    private void jbListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbListaActionPerformed
        if (cliente.isConnected()) {
            try {
                String comando = "/who";

                jtf_comandos.setText(comando + "]");

                obtenerFlujoSalida();
                escribirAlFlujo(jtf_comandos.getText());
            } catch (IOException ex) {
                Logger.getLogger(PanelCliente.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {//si no hemos conectado ..
            JOptionPane.showMessageDialog(this, "Debe conectar con el servidor primero.",
                    "notificacion", JOptionPane.DEFAULT_OPTION);
        }

    }//GEN-LAST:event_jbListaActionPerformed

    /**
     * metodo que borra las lineas de la tabla
     *
     * @param evt
     */
    private void jbtn_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_clearActionPerformed
        try {
            for (int x = 0; x < jTable2.getRowCount(); x++) {
                modelo.removeRow(x);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        txt_Area.setText("");
    }//GEN-LAST:event_jbtn_clearActionPerformed

    private void jComboUsersFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboUsersFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboUsersFocusLost

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        cerrarConexion();
    }//GEN-LAST:event_formWindowClosing

    private void menu_comandosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_comandosActionPerformed
        try {
            dos = new DataOutputStream(cliente.getOutputStream());
            dos.writeUTF("/help");
        } catch (IOException ex) {
            Logger.getLogger(PanelCliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menu_comandosActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed

        try {
            obtenerFlujoSalida();
            escribirAlFlujo("/help");
        } catch (IOException iex) {
            Logger.getLogger(PanelCliente.class.getName()).log(Level.SEVERE, null, iex);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jMenu1ActionPerformed

    /**
     * Evento para el login de usuario
     *
     * @param evt
     */
    private void menu_loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_loginActionPerformed

        try {
            if (cliente.isConnected()) {
                String comando = "/conectar";
                String nombre = obtenerNombre();
                jtf_comandos.setText(comando + "]" + nombre);

                obtenerFlujoSalida();
                escribirAlFlujo(jtf_comandos.getText());
                menu_login.setEnabled(false);//para no poder intentar login de nuevo
            } else {
                JOptionPane.showMessageDialog(this, "Debe conectar con el servidor primero.",
                        "notificacion", JOptionPane.PLAIN_MESSAGE);

            }

        } catch (NullPointerException npe) {
            // npe.printStackTrace();
            JOptionPane.showMessageDialog(this, "Debe conectar con el servidor primero.", "notificacion", JOptionPane.PLAIN_MESSAGE);
            //llamamos al evento del boton conectar
            //this.btn_Conectar.setActionCommand("conectar");//establezco el comando
            this.btn_ConectarActionPerformed(evt);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_menu_loginActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        try {
            String comando = "/exit";

            jtf_comandos.setText(comando);

            obtenerFlujoSalida();
            escribirAlFlujo(comando);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    /**
     * añadir el boton que añade paneles internos
     *
     * @param evt
     */

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        Ventana p = new Ventana(marco);
        p.ponerTexto("Hola amigo mio....");
        JFrame v = p.devolverVentana();
        v.pack();
        v.setLocationRelativeTo(this.jLabel3);
        v.setVisible(true);
        v.repaint();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListValueChanged
        if(adaptador.getSize()>10){
            ImageIcon icono = new ImageIcon(this.getClass().getResource("/img/llamar.png"));       
            JOptionPane.showMessageDialog(null, adaptador.getElementAt(jList.getSelectedIndex()),
            "Elemento seleccionado: ", JOptionPane.INFORMATION_MESSAGE, icono);
        }
        
    }//GEN-LAST:event_jListValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PanelCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PanelCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PanelCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PanelCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PanelCliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Conectar;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboUsers;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jList;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JButton jbLista;
    private javax.swing.JButton jbtn_clear;
    private javax.swing.JButton jtf_Enviar;
    private javax.swing.JTextField jtf_comandos;
    private javax.swing.JLabel label1;
    private javax.swing.JLabel label2;
    private javax.swing.JLabel lbl_users;
    private javax.swing.JPanel marco;
    private javax.swing.JMenuItem menu_comandos;
    private javax.swing.JMenuItem menu_login;
    private javax.swing.JMenu menu_salir;
    private javax.swing.JTextArea txt_Area;
    // End of variables declaration//GEN-END:variables

    private void iniciar() {
        this.setResizable(false);
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        this.setLocationRelativeTo(null);

        modelo = (DefaultTableModel) jTable2.getModel();
        //lista =  new DefaultListModel<>();
        //jList.setModel(lista);

        adaptador = new ArrayAdapter();
        jList.setModel(adaptador);

        /**
         * añadimos un oyente para rescribir las acciones de la ventana
         */
        this.addWindowListener(new WindowListener() {
            @Override
            public void windowOpened(WindowEvent e) {
                //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void windowClosing(WindowEvent e) {
                JOptionPane.showMessageDialog(null, "Necesita pulsar boton salida", "", JOptionPane.INFORMATION_MESSAGE);
                System.exit(0);
            }

            @Override
            public void windowClosed(WindowEvent e) {
                //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void windowIconified(WindowEvent e) {
                //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void windowDeiconified(WindowEvent e) {
                //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void windowActivated(WindowEvent e) {
                //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void windowDeactivated(WindowEvent e) {
                //To change body of generated methods, choose Tools | Templates.
            }
        });
    }

    private void realizarConexion() throws IOException, Exception {

        try {
            if (cliente == null) {
                cliente = new Socket(server, port);//creamos la conexion                   
                recibimos = new RecepcionDatos(cliente);//instanciamos el hilo al que le pasamos el socket
                //recibimos.setName(obtenerNombre());//ponemos un nombre al hilo
                recibimos.setDaemon(true);//se establece como servicio demonio porque va a estar continuamente 
                //funcionando.
                recibimos.start();//lanzamos el hilo.
            } else {
                JOptionPane.showMessageDialog(null, "Conexion ya establecida " + cliente.getLocalPort());
            }

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "No podemos conectar." + ex.getCause());

        } catch (NullPointerException npe) {
            JOptionPane.showMessageDialog(null, "El nombre ha de establecerse previamente.");

            if (cliente.isConnected()) {
                cliente = null;
                realizarConexion();
            }
        }
    }

    /**
     * Metodo que obtiene de la consola el nombre del usuario para el chat
     *
     * @return
     */
    private String obtenerNombre() {
        return JOptionPane.showInputDialog(
                this,
                "Selecciona tu NickName:",
                "Pantalla de seleccion de nombre",
                JOptionPane.PLAIN_MESSAGE);
    }

    private void cerrarConexion() {
        try {
            dos.close();
            cliente.close();
        } catch (Exception ex) {
            System.out.println("Error " + ex.getLocalizedMessage());
        }
    }

    private DataOutputStream obtenerFlujoSalida() {
        DataOutputStream salida = null;
        try {
            dos = new DataOutputStream(cliente.getOutputStream());
            if (dos != null) {
                salida = dos;
            }
        } catch (NullPointerException npe) {

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return salida;
    }

    private void escribirAlFlujo(String comando) throws IOException {

        if (!comando.isEmpty()) {
            dos.writeUTF(comando);
        }

    }

    /**
     * Clase interior en hebra auxiliar para recepcion de datos del servidor
     *
     */
    public class RecepcionDatos extends Thread {

        DataInputStream in = null;

        Socket conexion = null;
        boolean finalizar = true;

        private String nombre = "";
        //del servidor
        volatile String entrada = ""; //la respuesta del servidor

        public String getNombre() {
            return nombre;
        }

        public void setNombre(String nombre) {
            this.nombre = nombre;
        }

        /**
         * Constructor de la clase hilo
         *
         * @param cliente
         * @throws IOException
         */
        private RecepcionDatos(Socket cliente) throws IOException {
            this.conexion = cliente;
            this.in = new DataInputStream(conexion.getInputStream());
            // this.out = new DataOutputStream(conexion.getOutputStream());
            label1.setText("Puerto: " + conexion.getLocalPort());
            label2.setText("\nDireccion IP: " + conexion.getLocalAddress());
            /**
             * añado el listener al JCombo
             */
            jComboUsers.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    // solicitarListaUsuarios();

                }
            });

        }

        /**
         * Metodo encargado de llenar la lista cuando se solicitan los nombres
         * de usuarios para realizar una accion
         *
         * @param nombres
         */
        private void llenarCombo(String[] nombres) {
            //antes debo vaciar la lista
            jComboUsers.removeAllItems();
            String nombre = "";
            // nodoRoot = new DefaultMutableTreeNode("Listado de Sistemas");
            for (int x = 0; x < nombres.length; x++) {
                nombre = nombres[x];
                jComboUsers.addItem(nombre);
            }
        }

        /**
         * Método que ejecuta el hilo Ejecuta el método recibirResultado().
         */
        @Override
        public void run() {
            // autenticado = false;
            while (finalizar) {
                try {
                    if (this.isAlive()) {
                        //recibir las respuestas del servidor
                        recibirRespuestas();
                    }
                } catch (EOFException eof) {
                    JOptionPane.showMessageDialog(txt_Area, "Se desconectará automáticamente..EOF");
                    finalizar = false;
                    System.exit(0);
                } catch (IOException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(txt_Area, "Se desconectará automáticamente.IOE.");
                    finalizar = false;
                    System.exit(0);
                } catch (Exception ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(txt_Area, "Se desconectará automáticamente.EXC.");
                    finalizar = false;
                    System.exit(0);
                }

            }//final bucle run()

        }//..run()

        /**
         * Método que es el hilo en sí. Establece en un String lo que lee del
         * canal de entrada y lo pinta en el area de texto del panel gráfico.
         *
         * @throws IOException
         */
        private void recibirRespuestas() throws IOException, EOFException {

            //lee el flujo de entrada.
            String entrada = in.readUTF();
            limpiarPanel();
            //podemos decidir el panel en el cual pintar las respuestas
            //si son respuestas del servidor las pintamos en la tabla superior            
            filtrarRespuestas(entrada);
            //txt_Area.append(entrada);

        }//..recibir()

        private void limpiarPanel() {
            //añade a la caja de texto el valor
            txt_Area.setText("");
            jtf_Enviar.setText("");
        }

        private void filtrarRespuestas(String entrada) {
            String args[] = entrada.split(":");
            //partimos el primer elemento es el usuario
            //el segundo es el servidor que envia y esta quiero mostrarlo en
            //la tabla.
            String envia = args[1].toLowerCase();

            switch (envia) {
                //filtro primero que envia el servidor
                case ("[server"):
                    //si es respuesta del servidor 
                    //ahora el mensaje habria que partirlo en funcion al comando

                    String[] mensaje = entrada.split("<");

                    ponerMensajeEnVentana(mensaje[1]);

                    //establezco la linea para la tabla
                    Object[] linea = new Object[1];
                    try {
                        linea[0] = mensaje[1];
                        modelo.addRow(linea);
                        adaptador.addNotificacion(linea[0].toString());

                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                    break;

                default://por defecto muestro lo que recibo en el area de texto
                    txt_Area.setText(entrada);

                    break;
            }
        }

        /**
         * Metodo que pinta en un JFrame un mensaje o un texto personalizado
         *
         * @param cadena
         */
        private void ponerMensajeEnVentana(String cadena) {
            //paso a la ventana el contenedor JPanel que contiene varios componentes.
            Ventana p = new Ventana(marco);
            p.ponerTexto(cadena);
            //obtengo un objeto JFrame con el mensaje
            JFrame v = p.devolverVentana();
            //por último la animamos.
            p.animarVentana(v);
        }//..ponerMensajeEnVentana()

    }//..RecepcionDatos()

}//..PanelCliente
